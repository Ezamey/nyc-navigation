
import pandas as pd
import networkx as nx
import osmnx as ox




def generate_dic_edges(data: pd.DataFrame, edges: list, most_dangerous: bool =False) -> dict:
    '''
    

    Parameters
    ----------
    data : pd.DataFrame
        Pandas dataframe with the street names and associated danger scores.
    edges : list
        List of edges and their features: node id, length, etc..

    Returns
    -------
    dict
        Return a dic with as keys: code as (node id start, node id end, 0)
        and as items the danger score

    '''
    
    
    dic = {}
    for j in data["on_street_name"]:
        for i in range(len(edges)):
            if edges[i][3].get("name") == j:
                
                if most_dangerous == False:
                    dic[edges[i][0], edges[i][1],edges[i][2]] = data[data["on_street_name"]== j]['danger_score_global'].item()
                    
                else:
                    dic[edges[i][0], edges[i][1],edges[i][2]] = data[data["on_street_name"]== j]['reversed_danger_score_global'].item()
                   
    #print(dic)
    return dic


def add_edge_danger(data: object, G: classmethod) -> object:
    '''
        
    
        Parameters
        ----------
        data : object
            Pandas dataframe with the street names and associated danger scores.
        G : classmethod()
            Network of streets generated by osmnx.
    
        Returns
        -------
        object
            Network of streets generated by osmnx with the new attribute danger_score.
    
        '''

    
    #creating a list of edges for a given city 
    edges = list(G.edges(keys=True, data=True))
    
    #creating the dictionnary 
    dic_edges = generate_dic_edges(data, edges, most_dangerous=False)
    print(dic_edges)
    #Add the attribute danger and set it as 0
    nx.set_edge_attributes(G, 0, 'danger')
    
    #Assign the danger score to street concerned 
    nx.set_edge_attributes(G, dic_edges, 'danger')
    
    adj_matrix = nx.to_pandas_edgelist(G)
    
    adj_matrix.to_csv()
    
    
    
    #print(nx.get_edge_attributes(G, 'danger'))
    
    return G



def pick_location(start_lat: float, start_long: float, end_lat: float, end_long: float, weight: list = ["length"], trip_type: str = "drive") -> classmethod:

    G = ox.graph_from_place('Manhattan, New York, USA', network_type=trip_type)   
    
    data_danger = pd.read_csv(r"C:\Users\Guillaume\Documents\git\nyc-navigation\CSV\street.csv")
    
    G_danger = add_edge_danger(data_danger, G)
    
    
    start = (start_lat, start_long)
    end = (end_lat, end_long)
    
    start_node = ox.get_nearest_node(G_danger, start) 
    end_node = ox.get_nearest_node(G_danger, end)
    route = nx.shortest_path(G_danger, start_node, end_node, weight='danger')
    route_length = nx.shortest_path(G_danger, start_node, end_node, weight='length')
    list_route = [route, route_length]
    route_colors = ["r","b"]
    
    return ox.plot_graph_routes(G_danger, list_route, route_colors, route_linewidth=2, node_size=0)
     #ox.plot_graph_route(G, route, route_linewidth=6, node_size=0, bgcolor='k')            


pick_location(40.709042, -74.010474, 40.841742, -73.9394)
 

